## Basic steps for Git
Se positionner sur master : $ git checkout master
Mettre √† jour master sur son ordi : $ git pull origin master
Cr√©er une branche, depuis master, pour travailler : $ git branch nom_de_ta_feature
Se placer sur cette branche : $ git checkout nom_de_ta_feature
√Ä partir de l√†, tu peux travailler sur ta branche OKLM, repasser d'une branche √† l'autre avec git checkout, tout en n'oubliant pas de faire des commits (git add . et $ git commit -m "this is what i did")
Fusionner sa branche dans master (en 2 √©tapes de merge) :
$ git checkout master
$ git pull origin master
$ git checkout nom_de_ta_feature
$ git merge master + g√©rer les conflits si besoin
$ git checkout master
$ git merge nom_de_ta_feature + g√©rer les conflits si besoin
$ git push origin master


## Pour fusionner la branche contenant ton travail, voici la marche √† suivre, √©tape par √©tape :

$ git checkout master : tu te remets sur la branche master en vue de la mettre √† jour (√ßa fait 3 jours que tu ne l'as pas fait) ;
$ git pull origin master : tu r√©cup√®res de GitHub tout le travail qui a √©t√© effectu√© et mets la branche master √† jour ;
$ git checkout nom_de_ta_feature : tu te remets sur ta branche de feature en vue de la fusionner ;
$ git merge master : cette commande demande √† Git de fusionner master dans ta branche. L'ordre est important : c'est master qui va DANS ta branche et pas l'inverse. La branche master n'est pas modifi√©e pour le moment.
optionnel : gestion de conflits (voir plus loin)
$ git checkout master : tu te remets sur master
$ git merge nom_de_ta_feature : cette fois, on fait la fusion dans l'autre sens. On fusionne ta branche DANS master. La branche master est donc mise √† jour.
optionnel : gestion de conflits (voir plus loin)
$ git push origin master : Maintenant que la fusion est faite, il faut mettre GitHub √† jour pour que tous tes coll√®gues aient l'info. Donc envoie la branche √† jour sur Github üôå
